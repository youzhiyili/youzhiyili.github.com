youzhiyili.github.com
		│
            	├─  _config.yml 配置───>baseurl:	 /
                │
		├─   index.html 首页───────>---
		│					├───>layout: default
		│					├───>title: 首页标题
		│					├───>---
		│					├───><h2>{{ page.title }}</h2>
		│					├───><p>最新文章</p>
		│					├───><ul>
		│					├───>{% for post in site.posts %}
		│					├───><li>{{ post.date | date_to_string }} <a href="{{ site.baseurl }}{{ post.url }}">{{ post.title }}</a></li>
		│					├───>{% endfor %}
		│					└───></ul>
		│
		│
     		├─  _layouts
		│	├─  default.html 首页模板
		│	│				├───><!DOCTYPE html>
		│	│				├───><html>
		│	│				├───><head>
		│	│				├───><meta http-equiv="content-type" content="text/html; charset=utf-8" />
		│	│				├───><title>{{ page.title }}</title>
		│	│				├───></head>
		│	│				├───><body>
		│	│				├───>{{ content }}
		│	│				├───></body>
		│	│				└───></html>
		│	└─  post.html 子页面模板
		│	 				├───><!DOCTYPE html>
		│					├───><html>
		│					├───><head>
		│					├───><meta charset='utf-8' />
		│					├───></head>
		│					├───><body>
		│					├───><pre>
		│					├───><h1>{{ page.title }}</h1>
		│					├───>{{ content }}
		│					├───></pre>
		│					├───></body>
		│					└───></html>
		│
     		└─  _posts
			├─ 2012-12-21-a.html 子页面
			├─ 2012-12-21-b.html 子页面
			├─ 2012-12-21-c.html 子页面
			└─ 2012-12-21-d.html 子页面
			 				├───>---
			 				├───>layout: post
			 				├───>title: 文章标题
			 				├───>permalink: "自定义url"，默认url是/年/月/日/文章.html
			 				├───>---
			 				├───><hr><b>第一段</b>
			 				├───>第一段内容
			 				├───><hr><b>第二段</b>
			 				├───>第二段内容
			 				├───><hr><b>第n段</b>
			 				└───>第n段内容

------------------------------------------
安装Git
sudo apt-get install git

查看Git版本
git --version

设置Git
git config --global user.name youzhiyili
git config --global user.email youzhiyili@gmail.com

设置密码缓存为1小时
git config --global credential.helper cache
git config --global credential.helper 'cache --timeout=3600'
------------------------------------------
https://github.com注册，假设帐号是USERNAME，新建一个仓库名为USERNAME.github.com

克隆标准的Jekyll模板到本地，并改自己的仓库名
$ git clone https://github.com/plusjade/jekyll-bootstrap.git USERNAME.github.com

进入USERNAME.github.com
$ cd USERNAME.github.com

把项目网址改成自己的
$ git remote set-url origin git@github.com:USERNAME/USERNAME.github.com.git

提交到自己的主分支
$ git push origin master

打开自己的博客
http://USERNAME.github.com
------------------------------------------






------------------------------------------
初次使用
git clone https://github.com/youzhiyili/youzhiyili.github.com.git
cd youzhiyili.github.com
------------------------------------------
查看远程仓库
git remote -v
	origin	https://github.com/youzhiyili/youzhiyili.github.com.git (fetch)
	origin	https://github.com/youzhiyili/youzhiyili.github.com.git (push)
如果没有就添加到远程仓库
#git remote add origin https://github.com/youzhiyili/youzhiyili.github.com.git
------------------------------------------
变更文件后提交到远程仓库
git add . && git commit -m "first post" && git push origin master

------------------------------------------
克隆
git clone git@github.com:youzhiyili/youzhiyili.github.com && cd youzhiyili.github.com
------------------------------------------
连接
git remote add origin git@github.com:youzhiyili/youzhiyili.github.com.git
------------------------------------------
编辑、新增、删除......
nano ......
touch ......
git rm ......
------------------------------------------
上传
git add .
git commit -m "first post"
git push origin master
Username for 'https://github.com':
Password for 'https://youzhiyili@github.com':
推送成功：Everything up-to-date
------------------------------------------
问题：Non-fast-forward
原因：git仓库中已经有一部分代码，不允许被新代码覆盖
解决：
A 强推 git push -f
B 取得git代码，合并后再推 git fetch && git merge
------------------------------------------
问题：
You can't push to git://github.com/youzhiyili/youzhiyili.github.com.git
Use git@github.com:youzhiyili/youzhiyili.github.com.git
解决：
git remote rm origin
git remote add origin git@github.com:youzhiyili/youzhiyili.github.com
git push origin
------------------------------------------
问题：
Permission denied (publickey).
fatal: The remote end hung up unexpectedly
原因：github.com上面没有本机的SSH KEY
解决：https://help.github.com/articles/generating-ssh-keys<───官方帮助页面
cd ~/.ssh && ls───>id_rsa  id_rsa.pub  known_hosts
mkdir key_backup
cp id_rsa* && key_backup && rm id_rsa*───>备份id_rsa
ssh-keygen -t rsa -C youzhiyili@gmail.com───>用gitub.com注册的邮箱创建新的SSH密钥
sudo apt-get install xclip && xclip -sel clip < ~/.ssh/id_rsa.pub───>复制新的SSH密钥到剪切板
打开浏览器，粘贴SSH密钥https://github.com/settings/profile
ssh -T git@github.com
------------------------------------------
Git常用操作命令 
原文：http://rongjih.blog.163.com/blog/static/335744612010112562833316/

1) 远程仓库相关命令
检出仓库：$ git clone git://github.com/jquery/jquery.git
查看远程仓库：$ git remote -v
添加远程仓库：$ git remote add [name] [url]
删除远程仓库：$ git remote rm [name]
修改远程仓库：$ git remote set-url --push [name] [newUrl]
拉取远程仓库：$ git pull [remoteName] [localBranchName]
推送远程仓库：$ git push [remoteName] [localBranchName]

* 如果想把本地的某个分支test提交到远程仓库，并作为远程仓库的master分支，或者作为另外一个名叫test的分支，如下：
$ git push origin test:master         // 提交本地test分支作为远程的master分支
$ git push origin test:test              // 提交本地test分支作为远程的test分支

2）分支(branch)操作相关命令
查看本地分支：$ git branch
查看远程分支：$ git branch -r （如果还是看不到就先 git fetch origin 先）
创建本地分支：$ git branch [name] ----注意新分支创建后不会自动切换为当前分支
切换分支：$ git checkout [name]
创建新分支并立即切换到新分支：$ git checkout -b [name]
直接检出远程分支：$ git checkout -b [name] [remoteName] (如：git checkout -b myNewBranch origin/dragon)
删除分支：$ git branch -d [name] ---- -d选项只能删除已经参与了合并的分支，对于未有合并的分支是无法删除的。如果想强制删除一个分支，可以使用-D选项
合并分支：$ git merge [name] ----将名称为[name]的分支与当前分支合并
创建远程分支(本地分支push到远程)：$ git push origin [name]
删除远程分支：$ git push origin :heads/[name] 或 $ git push origin :[name] 

* 创建空的分支：(执行命令之前记得先提交你当前分支的修改，否则会被强制删干净没得后悔)
$ git symbolic-ref HEAD refs/heads/[name]
$ rm .git/index
$ git clean -fdx

3）版本(tag)操作相关命令
查看版本：$ git tag
创建版本：$ git tag [name]
删除版本：$ git tag -d [name]
查看远程版本：$ git tag -r
创建远程版本(本地版本push到远程)：$ git push origin [name]
删除远程版本：$ git push origin :refs/tags/[name]
合并远程仓库的tag到本地：$ git pull origin --tags
上传本地tag到远程仓库：$ git push origin --tags
创建带注释的tag：$ git tag -a [name] -m 'yourMessage'

4) 子模块(submodule)相关操作命令
添加子模块：$ git submodule add [url] [path]
    如：$ git submodule add git://github.com/soberh/ui-libs.git src/main/webapp/ui-libs
初始化子模块：$ git submodule init  ----只在首次检出仓库时运行一次就行
更新子模块：$ git submodule update ----每次更新或切换分支后都需要运行一下
删除子模块：（分4步走哦）
 1) $ git rm --cached [path]
 2) 编辑“.gitmodules”文件，将子模块的相关配置节点删除掉
 3) 编辑“ .git/config”文件，将子模块的相关配置节点删除掉
 4) 手动删除子模块残留的目录

5）忽略一些文件、文件夹不提交
在仓库根目录下创建名称为“.gitignore”的文件，写入不需要的文件夹名或文件，每个元素占一行即可，如
target
bin
*.db

6）后悔药
删除当前仓库内未受版本管理的文件：$ git clean -f
恢复仓库到上一次的提交状态：$ git reset --hard

7）Git一键推送多个远程仓库
编辑本地仓库的.git/config文件：
[remote "all"]
    url = git@github.com:dragon/test.git
    url = git@gitcafe.com:dragon/test.git
这样，使用git push all即可一键Push到多个远程仓库中。

=========================================================
windows 用法：
1 下载Git.exe http://git-scm.com/download
2 运行Git Bash
3 初始化 git init
4 克隆 git clone https://github.com/youzhiyili/youzhiyili.github.com.git
ssh-keygen -C youzhiyili@gmail.com -t rsa
ssh -T git@github.com
git config --global user.email youzhiyili@gmail.com
git config --global user.name youzhiyili

上传(./push.sh)
git add . && git commit -m "first post" && git push origin master


